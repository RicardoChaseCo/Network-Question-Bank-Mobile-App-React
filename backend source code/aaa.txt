【注册】用户名和密码接收：
    1、校验是否有username和password
        a. 字段正常，走到2
        b. 字段有错误，立刻返回消息（用户名或密码错误）
    2、查询数据库有没有这个username
        a. 已经存在该用户，返回消息（请勿重复注册）
        b. 不存在该用户，走到3
    3、赋予用户名、密码、默认头像
        a. 默认头像生成
        b. 返回注册成功给前端

【规范返回信息的结构】

{
    errCode: 0,
    message: "注册成功",
    data: {}
}

【登录】用户名和密码接收：
    1、校验是否有username和password
        a. 字段正常，走到2
        b. 字段有错误，立刻返回消息（用户名或密码错误）
    2、查询数据库有没有这个username
        a. 已经存在该用户，走到3
        b. 不存在该用户，返回消息（请先注册）
    3、把生成的token存入user表，并且查询对应用户的所有信息返回给前端

【获取用户信息】
    1、前端传送token过来
        鉴权（鉴别token）—— 除登录注册外，所有接口都需要鉴权
            - token生效，可以进行步骤2
            - token没生效  --> 让前端提醒用户重新登录
                a. token过期(1h)  
                b. 没这个用户
    2、从数据库检索该用户的所有信息
        根据token去知道现在是哪个用户，并且返回对应的信息给前端

【修改用户信息】
    1、前端传username、password和token过来
        a. 鉴权 
        b. 校验字段
    2、到数据库替换用户名或密码

【图片上传】
    1、前后端要协约好图片的字段 - avatar
    2、后端逻辑：
        a. 鉴权
        b. 接收到前端传过来的图片
            - 判断是否超过大小限制(20k)
            - 设置单图上传
            - 修改图片名字(aaa-时间戳.jpg)
            - 存储前端传过来的图片
            - 读取这个文件的路径，存入数据库替换avatar字段的值
            - 读取数据库的整条用户信息，返回给前端
    3、前端逻辑：
        a. 调用组件
        b. 设置请求的地址和token
        c. 修改localStorage，更新header组件

【用户角色权限】
    1、管理员
        可以给普通用户增加编辑权限
    2、普通用户
        
    
【编辑许可权限】
    1、管理员可以编辑
    2、普通用户需要等管理员赋予权限才可编辑

重新优化注册的代码（player，editable）
登录成功需要返回player和editable字段

【文章编辑】
    0、鉴权
    1、前端传文章的id过来
    2、到数据库查找对应id的文章
    3、title、subTitle、content、date、author字段全改

let str = "hello world"
switch(str){
    case str.includes("h"):
        console.log(123);
        break;
    default:
        console.log(456);
        break;
}

【分页逻辑】
    + 前端做分页  尽量不做
    + 后端做分页
        1、直接从数据库查询所有文章，得到一个数组
        2、按照前端指定的页数和每页数量，切割好数组，返回对应的数据
        3、这些数据要返回给前端：当前第几页、每页几条数据、总共几条数据、总共几页、切割好的数组
    + 前端请求后端处理好的分页
        1、传当前页码，和每页显示数量